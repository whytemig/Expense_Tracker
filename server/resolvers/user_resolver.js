import User from "../database/models/user_models.js";
import bcrypt from "bcryptjs";

// resolvers for the User
const userResolver = {
  Query: {
    authUser: async (_, __, context) => {
      try {
        // Check if the user is authenticated
        const authUser = await context.getUser();
        console.log(authUser);
        if (!authUser) {
          throw new Error("Not authenticated!");
        }

        return authUser;
      } catch (error) {
        console.log(error.message);
        throw new Error("Error in Auth", error.message);
      }
    },

    user: async (_, { userId }, context) => {
      try {
        const user = await User.findById(userId);
        return user;
      } catch (error) {
        console.log(error.message);
        throw new Error("Error in getting an User by Id", error.message);
      }
    },
  },
  Mutation: {
    signup: async (_, { input }, context) => {
      const { username, password, gender, name, email } = input;
      try {
        if (!username || !name || !password || !gender || !email) {
          throw new Error("All fields are Required!");
        }

        const emailExpression =
          /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

        const isValidEmail = emailExpression.test(String(email).toLowerCase());

        if (!isValidEmail) throw new Error("Inproper email value");

        const findUser = await User.findOne({ username, email });

        if (findUser) {
          throw new Error("User already exist!");
        }

        const salt = await bcrypt.genSalt(10);
        const hashPass = await bcrypt.hash(password, salt);

        // Avatar picture generated by API based off gender and username

        const boyAvatar = `https://avatar.iran.liara.run/public/boy?username=${username}`;
        const girlAvatar = `https://avatar.iran.liara.run/public/girl?username=${username}`;

        const newUser = new User({
          username,
          name,
          password: hashPass,
          gender,
          email,
          profilePicture: gender === "male" ? boyAvatar : girlAvatar,
        });

        await newUser.save();

        await context.login(newUser);

        return newUser;
      } catch (error) {
        console.log(error.message);
        throw new Error("Error Occurred in Signed Up", error.message);
      }
    },

    login: async (_, { input }, context) => {
      const { username, password } = input;

      try {
        if (!username || !password) throw new Error("All fields are required");
        const { user } = await context.authenticate("graphql-local", {
          username,
          password,
        });

        if (!user) {
          throw new Error("Invalid credentials");
        }

        await context.login(user);
        return user;
      } catch (error) {
        console.log(error.message);
        throw new Error(error.message);
      }
    },
    logout: async (_, __, context) => {
      try {
        await context.logout();
        context.req.session.destroy((err) => {
          if (err) throw new Error(err);
        });
        context.res.clearCookie("connect.sid");
        return { message: "Log out Successfully" };
      } catch (error) {
        console.log(error.message);
        throw new Error("Check Resolver or TypeDefs", error.message);
      }
    },
  },
};

export default userResolver;
